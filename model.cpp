#include <math.h>
#include "model.h"

const int INPUT_SIZE = 3;
const int DENSE1_SIZE = 16;
const int DENSE2_SIZE = 16;
const int RESULT_SIZE=2;


using namespace std;

const float W1[][DENSE1_SIZE]= {
{
    0.57361156, 0.16902283, 0.3204128, 0.37673968, -0.11376603, 0.38983405, 0.47470963, -0.4286094, 0.01755726, -0.2889005, 0.07595641, 0.117614165, 0.25267643, -0.13836554, -0.31649056, 0.3871528
},
{
    0.26868173, 0.36658776, 0.25778005, 0.1743272, -0.09107878, 0.26606947, -0.2579932, -0.27251986, -0.57364994, 0.09347172, 0.061440017, 0.18551174, -0.2208884, -0.1484554, 0.2027158, 0.035973907
},
{
    -0.009391214, 0.010395113, -0.12698805, 0.5223026, 0.50654995, 0.2932177, 0.24144694, -0.52414197, 0.1664517, 0.44278654, -0.34422335, 0.26790354, -0.3260057, 0.09771423, 0.09749274, 0.46975806
}
};

const float b1[]= {
    0.19196449, -0.01728584, -0.039409142, -0.18067665, 0.25358713, 0.0044722813, 0.3335058, 0.0, -0.40302557, -0.057532612, -0.1387172, 0.07666904, 0.89431286, 1.429783, -0.00302516, 0.060069278
};

const float W2[][DENSE2_SIZE]= {
{
    0.29865667, 0.26629657, 0.22844318, -0.12671365, -0.02314888, -0.4266038, 0.030448794, 0.1227625, -0.3618186, 0.3739797, -0.31915584, -0.32408556, -0.19493613, -0.0053221355, -0.279735, 0.01580141
},
{
    0.06862184, -0.05347746, -0.25964302, 0.11476018, 0.21574168, 0.29010525, -0.19063473, -0.24359678, 0.3266586, 0.3744414, -0.3846467, 0.30253038, 0.30839586, 0.63433933, 0.098722145, -0.06836351
},
{
    -0.11122429, -0.030899439, -0.40958712, 0.29421023, 0.05082758, 0.1655644, 0.35224268, 0.1923745, -0.071686916, 0.18357615, -0.22497363, -0.32045367, -0.33317256, 0.36454183, 0.4000236, 0.036382604
},
{
    -0.46381208, -0.027733795, 0.006739199, 0.08047689, -0.15142602, 0.079200126, -0.40689185, 0.3779931, -0.46866524, -0.096039824, -0.42676204, 0.3034056, 0.41963646, -0.27043027, -0.14763236, -0.080300406
},
{
    0.22429165, -0.40098128, 0.12572876, 0.2859634, 0.21069324, -0.38725978, -0.38561374, -0.3443741, -0.07801857, 0.40999198, -0.28778225, 0.2967597, -0.045309816, 0.2509402, -0.5005932, -0.15896527
},
{
    0.0483062, 0.113369845, -0.3211438, 0.23771907, 0.257956, -0.036626834, 0.010141909, -0.10276938, -0.027133422, 0.13715614, 0.20979151, -0.16819963, -0.13833295, -0.12970713, -0.39092264, 0.09167622
},
{
    -0.34349695, -0.23310342, -0.069242, 0.24146084, 0.029016674, -0.33770615, 0.124186665, -0.07959112, -0.10152934, -0.27108982, -0.039287746, -0.102959275, -1.0618638, 0.4087036, 0.35835513, 0.08140964
},
{
    -0.19534467, 0.43203256, 0.1563051, -0.40845054, -0.36882368, -0.23268937, -0.15069309, 0.40171465, 0.36410907, -0.11960566, -0.2663541, -0.1764088, -0.35285252, -0.29277343, -0.2812643, -0.3075332
},
{
    0.2318432, 0.050973367, -0.26736504, -0.19042078, -0.27757013, -0.04622991, -0.30849877, -0.31105444, -0.34600666, 0.06255836, 0.33465913, -0.43591252, -0.41242072, 0.087747164, -0.29373562, -0.08348297
},
{
    -0.014323698, 0.18154903, 0.15412834, 0.34942535, 0.07905392, 0.22645767, -0.079197496, -0.34180745, 0.32090837, 0.083838426, -0.38063446, -0.32326683, 0.30145222, 0.5889776, -0.40514952, -0.36244425
},
{
    -0.2677251, 0.043643776, -0.07063842, 0.20269199, -0.086706065, 0.349878, -0.36859316, 0.14136271, -0.0914659, 0.2936198, -0.02186814, 0.75457245, 0.30843577, 0.14530794, -0.15898803, 0.033475325
},
{
    -0.035908148, 0.3459916, 0.19393554, 0.11302105, 0.05989453, 0.18220355, -0.22736195, -0.23300745, -0.111061536, -0.19264941, 0.2857047, -0.048421927, 0.098419555, -0.07789286, 0.37545222, 0.37622005
},
{
    0.015300423, -0.405922, -0.24806072, -0.34798044, 0.25664952, -0.38386205, 0.16889593, 0.10112427, 0.12284228, -0.41276184, -0.4251573, 0.16739206, 0.35055235, 0.021409934, 0.099207245, -0.25619617
},
{
    0.2255747, -0.02576398, -0.084522516, 0.23408967, 0.19435415, -0.35132003, -0.0018406212, 0.27997252, 0.20275988, -0.25599495, -0.1252524, 0.039672103, -0.14190598, 0.3331135, -0.20646074, 0.23030636
},
{
    0.12175474, -0.080319054, -0.048947424, -0.17170212, 0.16138136, 0.076706834, -0.27887577, 0.14544092, 0.22710781, -0.14998318, 0.17794862, -0.005740476, -0.3048686, 0.012366569, -0.11992881, -0.13543484
},
{
    -0.45481002, 0.31830776, -0.20516944, -0.37978354, 0.045466974, -0.3222766, -0.42211455, 0.3789245, 0.30948728, 0.3074896, -0.43263763, 0.41082436, -0.40965596, -0.3496319, 0.032914452, 0.23103201
}
};

const float b2[]= {
    -0.070167035, 0.009458577, 0.0, -0.06358535, 0.34219083, -0.112235785, 0.0, -0.091005735, -0.07570882, -0.06558101, 0.0, 0.04689837, -0.52454966, 0.615195, -0.1556902, 0.107496224
};

const float W3[][RESULT_SIZE]= {
{
    -0.44736233, -0.14896889
},
{
    0.44040355, -0.39912066
},
{
    0.39718252, -0.110280216
},
{
    -0.51131284, 0.049436457
},
{
    -0.15960981, 0.56808066
},
{
    -0.3622311, -0.3286311
},
{
    -0.30452728, -0.46458942
},
{
    -0.1585218, -0.32357636
},
{
    -0.010559547, 0.33314177
},
{
    -0.32414478, 0.009267901
},
{
    0.4002636, -0.13705376
},
{
    0.50751734, -0.2915155
},
{
    -0.0774567, -0.11145898
},
{
    0.6438133, -0.06536147
},
{
    -0.25056165, -0.43167198
},
{
    0.43127707, 0.5168021
}
};

const float b3[]= {
    0.06985333, 0.20259334
};



inline float relu(float x) {
    return fmaxf(0.0f, x); 
}


int predict(long a,long b,long c,float arr[][16]) {

    float x[1][INPUT_SIZE];
    x[0][0]=a;
    x[0][1]=b;
    x[0][2]=c;


    float layer1[1][DENSE1_SIZE];

    for (int i = 0; i < 1; i++) {
        for (int j = 0; j < DENSE1_SIZE; j++) {
            layer1[i][j] = 0;
  
            for (int k = 0; k < INPUT_SIZE; k++) {
              layer1[i][j] += x[i][k] * W1[k][j];
            }
  
        }
  
    }


  for (int i = 0; i < 1; i++) {
        for (int j = 0; j < DENSE1_SIZE; j++) {
            layer1[i][j] += b1[j] ;
  
        }
  
    }

    for(int i=0;i<DENSE1_SIZE;i++){
          layer1[0][i]=relu(layer1[0][i]);
    }
    for(int i=0;i<1;i++){
      for(int j=0;j<16;j++){
        arr[i][j]=layer1[i][j];
      }
    }
  

    float layer2[1][DENSE2_SIZE];

    for (int i = 0; i < 1; i++) {
        for (int j = 0; j < DENSE2_SIZE; j++) {
            layer2[i][j] = 0;
  
            for (int k = 0; k < DENSE1_SIZE; k++) {
              layer2[i][j] += layer1[i][k] * W2[k][j];
            }
  
        }
  
    }

  for (int i = 0; i < 1; i++) {
        for (int j = 0; j < DENSE2_SIZE; j++) {
            layer2[i][j] += b2[j];
  
        }
  
    }

    for(int i=0;i<DENSE2_SIZE;i++){
          layer2[0][i]=relu(layer2[0][i]);
    }

    float layer3[1][RESULT_SIZE];
    for (int i = 0; i < 1; i++) {
        for (int j = 0; j < RESULT_SIZE; j++) {
            layer3[i][j] = 0;
  
            for (int k = 0; k < DENSE2_SIZE; k++) {
              layer3[i][j] += layer2[i][k] * W3[k][j];
            }
  
        }
  
    }

  for (int i = 0; i < 1; i++) {
        for (int j = 0; j < RESULT_SIZE; j++) {
            layer3[i][j] += b3[j];
  
        }
  
    }



    return layer3[0][1]-layer3[0][0] > 1e-9;
    
}

